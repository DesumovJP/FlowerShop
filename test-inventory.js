// –¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –∑–∞–ª–∏—à–∫—ñ–≤
const FRONTEND_URL = 'http://localhost:3000';

async function testInventoryAPI() {
  console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API –∑–∞–ª–∏—à–∫—ñ–≤...\n');

  try {
    // –¢–µ—Å—Ç 1: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–º—ñ–Ω–∏
    console.log('1Ô∏è‚É£ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ—ó –∑–º—ñ–Ω–∏...');
    const createShiftResponse = await fetch(`${FRONTEND_URL}/api/shifts`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        date: '2024-01-20',
        employee: '–¢–µ—Å—Ç–æ–≤–∏–π –ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫',
        shiftType: 'day',
        notes: '–¢–µ—Å—Ç–æ–≤–∞ –∑–º—ñ–Ω–∞ –¥–ª—è –∑–∞–ª–∏—à–∫—ñ–≤'
      }),
    });

    if (!createShiftResponse.ok) {
      const errorData = await createShiftResponse.json();
      console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–º—ñ–Ω–∏:', errorData);
      return;
    }

    const shiftData = await createShiftResponse.json();
    const shiftId = shiftData.data?.id;
    console.log('‚úÖ –ó–º—ñ–Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞:', shiftData);

    if (shiftId) {
      // –¢–µ—Å—Ç 2: –ó–∞–∫—Ä–∏—Ç—Ç—è –∑–º—ñ–Ω–∏ –∑ –∑–∞–ø–∏—Å–æ–º –∑–∞–ª–∏—à–∫—ñ–≤
      console.log('\n2Ô∏è‚É£ –ó–∞–∫—Ä–∏—Ç—Ç—è –∑–º—ñ–Ω–∏ –∑ –∑–∞–ø–∏—Å–æ–º –∑–∞–ª–∏—à–∫—ñ–≤...');
      const closeShiftResponse = await fetch(`${FRONTEND_URL}/api/inventory-records/create-for-shift`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          shiftId: shiftId,
          inventoryData: {
            bouquetsCount: 25,
            singleFlowersCount: 150,
            varietiesCount: 12,
            notes: '–¢–µ—Å—Ç–æ–≤—ñ –∑–∞–ª–∏—à–∫–∏ –Ω–∞ –∫—ñ–Ω–µ—Ü—å –∑–º—ñ–Ω–∏'
          }
        }),
      });

      if (closeShiftResponse.ok) {
        const closeData = await closeShiftResponse.json();
        console.log('‚úÖ –ó–º—ñ–Ω–∞ –∑–∞–∫—Ä–∏—Ç–∞ –∑ –∑–∞–ª–∏—à–∫–∞–º–∏:', closeData);
      } else {
        const errorData = await closeShiftResponse.json();
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –∑–º—ñ–Ω–∏:', errorData);
      }

      // –¢–µ—Å—Ç 3: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ª–∏—à–∫—ñ–≤ –∑–∞ –º—ñ—Å—è—Ü—å
      console.log('\n3Ô∏è‚É£ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ª–∏—à–∫—ñ–≤ –∑–∞ –º—ñ—Å—è—Ü—å...');
      const getInventoryResponse = await fetch(`${FRONTEND_URL}/api/inventory-records?month=1&year=2024`);
      
      if (getInventoryResponse.ok) {
        const inventoryData = await getInventoryResponse.json();
        console.log('‚úÖ –ó–∞–ª–∏—à–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω—ñ:', inventoryData);
      } else {
        const errorData = await getInventoryResponse.json();
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ª–∏—à–∫—ñ–≤:', errorData);
      }

      // –¢–µ—Å—Ç 4: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ª–∏—à–∫—ñ–≤ –∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
      console.log('\n4Ô∏è‚É£ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ª–∏—à–∫—ñ–≤ –∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç...');
      const getRangeResponse = await fetch(`${FRONTEND_URL}/api/inventory-records?dateFrom=2024-01-01&dateTo=2024-01-31`);
      
      if (getRangeResponse.ok) {
        const rangeData = await getRangeResponse.json();
        console.log('‚úÖ –ó–∞–ª–∏—à–∫–∏ –∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω –æ—Ç—Ä–∏–º–∞–Ω—ñ:', rangeData);
      } else {
        const errorData = await getRangeResponse.json();
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ª–∏—à–∫—ñ–≤ –∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω:', errorData);
      }
    }

  } catch (error) {
    console.log('‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É
testInventoryAPI();
