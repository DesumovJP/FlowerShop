'use client';

import React, { useMemo } from 'react';
import {
  Box,
  Card,
  CardContent,
  Grid,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Typography,
  InputAdornment,
  Button,
  useTheme,
  useMediaQuery,
} from '@mui/material';
import SearchIcon from '@mui/icons-material/Search';

// –¢–∏–ø–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
interface Product {
  documentId: string;
  name: string;
  slug: string;
  price: number;
  productType: string;
  color: string;
  description?: string;
  cardType?: string;
  image?: {
    documentId: string;
    url: string;
    alternativeText?: string;
    width?: number;
    height?: number;
  };
  varieties?: Array<{
    documentId: string;
    name: string;
    slug: string;
  }>;
  createdAt: string;
  updatedAt: string;
  publishedAt: string;
}

interface ProductFiltersProps {
  // –î–∞–Ω—ñ
  allProducts: Product[];
  
  // –°—Ç–∞–Ω–∏ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  searchTerm: string;
  filterVariety: string;
  filterColor: string;
  filterProductType: string;
  
  // –û–±—Ä–æ–±–Ω–∏–∫–∏ –∑–º—ñ–Ω
  onSearchChange: (value: string) => void;
  onVarietyChange: (value: string) => void;
  onColorChange: (value: string) => void;
  onProductTypeChange: (value: string) => void;
  onResetFilters: () => void;
  
  // –û–ø—Ü—ñ—ó
  showProductTypeFilter?: boolean;
  showResetButton?: boolean;
  variant?: 'admin' | 'catalog';
}

// –ú–∞–ø—ñ–Ω–≥ –∫–æ–ª—å–æ—Ä—ñ–≤
const colorMapping: Record<string, string> = {
  'red': '–ß–µ—Ä–≤–æ–Ω–∏–π',
  'pink': '–†–æ–∂–µ–≤–∏–π',
  'white': '–ë—ñ–ª–∏–π',
  'yellow': '–ñ–æ–≤—Ç–∏–π',
  'purple': '–§—ñ–æ–ª–µ—Ç–æ–≤–∏–π',
  'blue': '–°–∏–Ω—ñ–π',
  'green': '–ó–µ–ª–µ–Ω–∏–π',
  'orange': '–û—Ä–∞–Ω–∂–µ–≤–∏–π',
  'cream': '–ö—Ä–µ–º–æ–≤–∏–π',
  'peach': '–ü–µ—Ä—Å–∏–∫–æ–≤–∏–π'
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É
const getColorValue = (color: string) => {
  const colorMap: Record<string, string> = {
    '–ß–µ—Ä–≤–æ–Ω–∏–π': '#e53e3e',
    '–†–æ–∂–µ–≤–∏–π': '#ed64a6',
    '–ë—ñ–ª–∏–π': '#f7fafc',
    '–ñ–æ–≤—Ç–∏–π': '#f6e05e',
    '–§—ñ–æ–ª–µ—Ç–æ–≤–∏–π': '#9f7aea',
    '–°–∏–Ω—ñ–π': '#4299e1',
    '–ó–µ–ª–µ–Ω–∏–π': '#68d391',
    '–û—Ä–∞–Ω–∂–µ–≤–∏–π': '#ed8936',
    '–ö—Ä–µ–º–æ–≤–∏–π': '#fef5e7',
    '–ü–µ—Ä—Å–∏–∫–æ–≤–∏–π': '#fed7d7'
  };
  return colorMap[color] || '#e2e8f0';
};

export default function ProductFilters({
  allProducts,
  searchTerm,
  filterVariety,
  filterColor,
  filterProductType,
  onSearchChange,
  onVarietyChange,
  onColorChange,
  onProductTypeChange,
  onResetFilters,
  showProductTypeFilter = true,
  showResetButton = true,
  variant = 'admin'
}: ProductFiltersProps) {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  // –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–ª—å–æ—Ä–∏ –∑ –ø–æ—Ç–æ—á–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
  const availableColors = useMemo(() => {
    const colors = allProducts
      .map(product => product.color)
      .filter(Boolean)
      .map(color => colorMapping[color] || color);
    
    const uniqueColors = Array.from(new Set(colors));
    return ['–í—Å—ñ –∫–æ–ª—å–æ—Ä–∏', ...uniqueColors];
  }, [allProducts]);

  // –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–æ—Ä—Ç–∏ –∑ –ø–æ—Ç–æ—á–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
  const availableVarieties = useMemo(() => {
    const varietiesFromProducts = allProducts
      .flatMap(product => product.varieties || [])
      .map(variety => variety.name);
    
    const uniqueVarieties = Array.from(new Set(varietiesFromProducts));
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç–∏ —Å–æ—Ä—Ç—ñ–≤ –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ –∑ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
    return uniqueVarieties.map(varietyName => {
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä—à–∏–π –ø—Ä–æ–¥—É–∫—Ç –∑ —Ü–∏–º —Å–æ—Ä—Ç–æ–º –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
      const productWithVariety = allProducts.find(product => 
        product.varieties?.some(v => v.name === varietyName)
      );
      
      const varietyFromProduct = productWithVariety?.varieties?.find(v => v.name === varietyName);
      
      return {
        documentId: varietyFromProduct?.documentId || varietyName,
        name: varietyName,
        slug: varietyFromProduct?.slug || varietyName.toLowerCase().replace(/\s+/g, '-')
      };
    });
  }, [allProducts]);

  // –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–∏–ø–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
  const availableProductTypes = useMemo(() => {
    const types = allProducts.map(product => product.productType);
    const uniqueTypes = Array.from(new Set(types));
    
    const typeLabels = {
      'bouquet': '–ë—É–∫–µ—Ç–∏',
      'singleflower': '–ö–≤—ñ—Ç–∫–∞',
      'composition': '–ö–æ–º–ø–æ–∑–∏—Ü—ñ—ó',
      'accessory': '–ê–∫—Å–µ—Å—É–∞—Ä–∏'
    };
    
    return ['–í—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏', ...uniqueTypes.map(type => typeLabels[type] || type)];
  }, [allProducts]);

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∞–∫—Ç–∏–≤–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏
  const hasActiveFilters = searchTerm || 
    filterColor !== '–í—Å—ñ –∫–æ–ª—å–æ—Ä–∏' || 
    filterVariety !== '–í—Å—ñ —Å–æ—Ä—Ç–∏' || 
    (showProductTypeFilter && filterProductType !== '–í—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏');

  return (
    <Card sx={{ 
      mb: { xs: 2, md: 3 },
      boxShadow: 'none',
      border: `1px solid ${theme.palette.grey[200]}`,
      boxSizing: 'border-box',
      width: '100%',
      borderRadius: 0,
    }}>
      <CardContent sx={{ p: { xs: 2, md: 3 }, '& *:hover': { boxShadow: 'none' } }}>
        <Grid container spacing={2} alignItems="center">
          {/* –ü–æ—à—É–∫ */}
          <Grid size={{ xs: 12, sm: 6, md: 3 }}>
            <TextField
              fullWidth
              placeholder="–ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—ñ–≤..."
              value={searchTerm}
              onChange={(e) => onSearchChange(e.target.value)}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchIcon />
                  </InputAdornment>
                ),
              }}
              sx={{
                '& .MuiOutlinedInput-root': {
                  backgroundColor: theme.palette.grey[50],
                }
              }}
            />
          </Grid>

          {/* –°–æ—Ä—Ç –∫–≤—ñ—Ç—ñ–≤ */}
          <Grid size={{ xs: 12, sm: 6, md: 3 }}>
            <FormControl fullWidth>
              <InputLabel>–°–æ—Ä—Ç –∫–≤—ñ—Ç—ñ–≤</InputLabel>
              <Select
                value={filterVariety}
                label="–°–æ—Ä—Ç –∫–≤—ñ—Ç—ñ–≤"
                onChange={(e) => onVarietyChange(e.target.value)}
                MenuProps={{
                  PaperProps: {
                    style: {
                      maxHeight: '300px',
                    },
                  },
                }}
              >
                <MenuItem value="–í—Å—ñ —Å–æ—Ä—Ç–∏">
                  <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', width: '100%' }}>
                    <span>–í—Å—ñ —Å–æ—Ä—Ç–∏</span>
                    <Typography variant="caption" color="textSecondary">
                      {allProducts.length}
                    </Typography>
                  </Box>
                </MenuItem>
                {availableVarieties.map((variety) => (
                  <MenuItem key={variety.documentId} value={variety.name}>
                    <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', width: '100%' }}>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Typography>üå∏</Typography>
                        {variety.name}
                      </Box>
                      <Typography variant="caption" color="textSecondary">
                        {allProducts.filter(p => 
                          p.varieties?.some(v => v.name === variety.name)
                        ).length}
                      </Typography>
                    </Box>
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>

          {/* –ö–æ–ª—ñ—Ä */}
          <Grid size={{ xs: 12, sm: 6, md: 3 }}>
            <FormControl fullWidth>
              <InputLabel>–ö–æ–ª—ñ—Ä</InputLabel>
              <Select
                value={filterColor}
                label="–ö–æ–ª—ñ—Ä"
                onChange={(e) => onColorChange(e.target.value)}
                MenuProps={{
                  PaperProps: {
                    style: {
                      maxHeight: '300px',
                    },
                  },
                }}
              >
                  <MenuItem value="–í—Å—ñ –∫–æ–ª—å–æ—Ä–∏">
                    <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', width: '100%' }}>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Box
                          sx={{
                            width: 16,
                            height: 16,
                            borderRadius: '50%',
                            background: 'linear-gradient(45deg, #ff0000, #ff8000, #ffff00, #80ff00, #00ff00, #00ff80, #00ffff, #0080ff, #0000ff, #8000ff, #ff00ff, #ff0080)',
                            border: '1px solid',
                            borderColor: theme.palette.grey[300],
                          }}
                        />
                        <span>–í—Å—ñ –∫–æ–ª—å–æ—Ä–∏</span>
                      </Box>
                      <Typography variant="caption" color="textSecondary">
                        {allProducts.length}
                      </Typography>
                    </Box>
                  </MenuItem>
                  {availableColors.filter(color => color !== '–í—Å—ñ –∫–æ–ª—å–æ—Ä–∏').map((color) => (
                    <MenuItem key={color} value={color}>
                      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', width: '100%' }}>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <Box
                            sx={{
                              width: 16,
                              height: 16,
                              borderRadius: '50%',
                              backgroundColor: getColorValue(color),
                              border: '1px solid',
                              borderColor: theme.palette.grey[300],
                            }}
                          />
                          {color}
                        </Box>
                        <Typography variant="caption" color="textSecondary">
                          {allProducts.filter(p => {
                            const ukrainianColor = colorMapping[p.color] || p.color;
                            return ukrainianColor === color;
                          }).length}
                        </Typography>
                      </Box>
                    </MenuItem>
                  ))}
              </Select>
            </FormControl>
          </Grid>

          {/* –¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∫–∏) */}
          {showProductTypeFilter && (
            <Grid size={{ xs: 12, sm: 6, md: 3 }}>
              <FormControl fullWidth>
                <InputLabel>–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É</InputLabel>
                <Select
                  value={filterProductType}
                  label="–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É"
                  onChange={(e) => onProductTypeChange(e.target.value)}
                >
                  <MenuItem value="–í—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏">
                    <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', width: '100%' }}>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Typography>üõçÔ∏è</Typography>
                        <span>–í—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏</span>
                      </Box>
                      <Typography variant="caption" color="textSecondary">
                        {allProducts.length}
                      </Typography>
                    </Box>
                  </MenuItem>
                  {availableProductTypes.filter(type => type !== '–í—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏').map((type) => (
                    <MenuItem key={type} value={type}>
                      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', width: '100%' }}>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <Typography>
                            {type === '–ë—É–∫–µ—Ç–∏' ? 'üíê' : 
                             type === '–ö–≤—ñ—Ç–∫–∞' ? 'üå∏' : 
                             type === '–ö–æ–º–ø–æ–∑–∏—Ü—ñ—ó' ? 'üå∫' : 
                             type === '–ê–∫—Å–µ—Å—É–∞—Ä–∏' ? 'üõí' : 'üõçÔ∏è'}
                          </Typography>
                          <span>{type}</span>
                        </Box>
                        <Typography variant="caption" color="textSecondary">
                          {allProducts.filter(p => {
                            const typeLabels = {
                              'bouquet': '–ë—É–∫–µ—Ç–∏',
                              'singleflower': '–ö–≤—ñ—Ç–∫–∞',
                              'composition': '–ö–æ–º–ø–æ–∑–∏—Ü—ñ—ó',
                              'accessory': '–ê–∫—Å–µ—Å—É–∞—Ä–∏'
                            };
                            return typeLabels[p.productType] === type;
                          }).length}
                        </Typography>
                      </Box>
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
          )}
        </Grid>
        
        {/* –ö–Ω–æ–ø–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ */}
        {showResetButton && hasActiveFilters && (
          <Box sx={{ mt: 2, display: 'flex', justifyContent: 'flex-end' }}>
            <Button
              variant="outlined"
              size="small"
              onClick={onResetFilters}
              sx={{
                borderColor: theme.palette.grey[300],
                color: theme.palette.text.secondary,
                '&:hover': {
                  borderColor: theme.palette.grey[400],
                  backgroundColor: theme.palette.grey[50],
                },
              }}
            >
              –°–∫–∏–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏
            </Button>
          </Box>
        )}
      </CardContent>
    </Card>
  );
}
