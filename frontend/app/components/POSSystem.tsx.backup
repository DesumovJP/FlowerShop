'use client';

import React, { useState, useEffect } from 'react';
import { useProductsStore, Product } from '../store/productsStore';
import {
  Box,
  Typography,
  Grid,
  Card,
  CardContent,
  Button,
  TextField,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  IconButton,
  Chip,
  Avatar,
  InputAdornment,
  useTheme,
  useMediaQuery,
  Badge,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  FormControl,
  FormControlLabel,
  Checkbox,
  RadioGroup,
  Radio,
  Divider,
} from '@mui/material';
import {
  Search as SearchIcon,
  Add as AddIcon,
  Remove as RemoveIcon,
  ShoppingCart as ShoppingCartIcon,
  Receipt as ReceiptIcon,
  Print as PrintIcon,
  Email as EmailIcon,
  QrCodeScanner as QrCodeIcon,
  Payment as PaymentIcon,
  CreditCard as CreditCardIcon,
  AttachMoney as CashIcon,
  PhoneAndroid as MobileIcon,
  Close as CloseIcon,
} from '@mui/icons-material';

interface CartItem {
  product: Product;
  quantity: number;
  total: number;
}

export default function POSSystem() {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isTablet = useMediaQuery(theme.breakpoints.down('lg'));
  const isDesktop = useMediaQuery(theme.breakpoints.up('lg'));
  
  // Zustand store
  const { products, loading, fetchProducts } = useProductsStore();
  
  const [cart, setCart] = useState<CartItem[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  
  // Payment modal state
  const [paymentModalOpen, setPaymentModalOpen] = useState(false);
  const [paymentMethod, setPaymentMethod] = useState('cash');
  const [includeDelivery, setIncludeDelivery] = useState(false);
  const [deliveryPrice, setDeliveryPrice] = useState(50);
  const [orderComment, setOrderComment] = useState('');

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –ø—Ä–∏ –º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    console.log('üõí POSSystem: Fetching products...');
    fetchProducts();
  }, [fetchProducts]);

  // –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É
  useEffect(() => {
    console.log('üõí POSSystem state:', {
      productsCount: products.length,
      loading,
      searchTerm,
      selectedCategory,
      filteredProductsCount: products.filter(product => {
        const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesCategory = selectedCategory === 'all' || product.productType === selectedCategory;
        return matchesSearch && matchesCategory;
      }).length,
      firstProduct: products[0] ? {
        name: products[0].name,
        documentId: products[0].documentId,
        productType: products[0].productType
      } : null
    });
  }, [products, loading, searchTerm, selectedCategory]);

  // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ç–æ–≤–∞—Ä—ñ–≤
  const filteredProducts = products.filter(product => {
    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = selectedCategory === 'all' || product.productType === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –≤ –∫–æ—à–∏–∫
  const addToCart = (product: Product) => {
    const existingItem = cart.find(item => item.product.documentId === product.documentId);
    
    if (existingItem) {
      setCart(cart.map(item =>
        item.product.documentId === product.documentId
          ? { ...item, quantity: item.quantity + 1, total: (item.quantity + 1) * product.price }
          : item
      ));
    } else {
      setCart([...cart, {
        product,
        quantity: 1,
        total: product.price
      }]);
    }
  };

  // –ó–º—ñ–Ω–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—É
  const updateQuantity = (productId: string, newQuantity: number) => {
    if (newQuantity <= 0) {
      removeFromCart(productId);
      return;
    }
    
    setCart(cart.map(item =>
      item.product.documentId === productId
        ? { ...item, quantity: newQuantity, total: newQuantity * item.product.price }
        : item
    ));
  };

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –∑ –∫–æ—à–∏–∫–∞
  const removeFromCart = (productId: string) => {
    setCart(cart.filter(item => item.product.documentId !== productId));
  };

  // –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª–∫–∏ –æ–ø–ª–∞—Ç–∏
  const handlePayment = () => {
    setPaymentModalOpen(true);
  };

  // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª–∫–∏ —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞
  const handlePaymentComplete = () => {
    setPaymentModalOpen(false);
    setCart([]);
    setOrderComment('');
    setIncludeDelivery(false);
  };

  // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª–∫–∏ –±–µ–∑ –æ–ø–ª–∞—Ç–∏
  const handlePaymentCancel = () => {
    setPaymentModalOpen(false);
  };

  // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏
  const subtotal = cart.reduce((sum, item) => sum + item.total, 0);
  const deliveryTotal = includeDelivery ? deliveryPrice : 0;
  const total = subtotal + deliveryTotal;

  // –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤
  const categories = [
    { id: 'all', name: '–í—Å—ñ —Ç–æ–≤–∞—Ä–∏', icon: 'üõçÔ∏è' },
    { id: 'bouquet', name: '–ë—É–∫–µ—Ç–∏', icon: 'üå∏' },
    { id: 'singleflower', name: '–û–¥–∏–Ω–æ—á–Ω—ñ –∫–≤—ñ—Ç–∏', icon: 'üåπ' },
    { id: 'composition', name: '–ö–æ–º–ø–æ–∑–∏—Ü—ñ—ó', icon: 'üå∫' },
    { id: 'accessory', name: '–ê–∫—Å–µ—Å—É–∞—Ä–∏', icon: 'üéÄ' },
  ];

  // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —è–∫—â–æ —Ç–æ–≤–∞—Ä–∏ —â–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è
  if (loading && products.length === 0) {
    return (
      <Box sx={{ 
        height: '100vh',
        backgroundColor: '#f5f5f5',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        flexDirection: 'column',
        gap: 2,
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        zIndex: 9999
      }}>
        <Typography variant="h6" color="textSecondary" sx={{ textAlign: 'center' }}>
          –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è POS-—Å–∏—Å—Ç–µ–º–∏...
        </Typography>
        <Box sx={{ fontSize: '2rem' }}>üå∏</Box>
      </Box>
    );
  }

  return (
    <Box sx={{ 
      height: 'calc(100vh - 64px)',
      background: 'linear-gradient(135deg, #F8F9FA 0%, #E9ECEF 100%)',
      overflow: 'hidden',
      position: 'relative'
    }}>
      <Grid container spacing={{ xs: 2, sm: 0, md: 0 }} sx={{ height: '100%', m: 0 }}>
        {/* Left Panel - Cart */}
        <Grid size={{ xs: 12, sm: 4.2, md: 4.2 }} sx={{ order: isMobile ? 1 : 2, height: '100%' }}>
          <Box sx={{ 
            height: '100%',
            background: 'rgba(255, 255, 255, 0.9)',
            backdropFilter: 'blur(20px)',
            borderRight: isMobile ? 'none' : '1px solid rgba(255, 255, 255, 0.2)',
            borderBottom: isMobile ? '1px solid rgba(255, 255, 255, 0.2)' : 'none',
            display: 'flex',
            flexDirection: 'column',
            borderRadius: 0
          }}>
          {/* Cart Items */}
          <Box sx={{ 
            flex: 1, 
            px: 2, 
            py: 1,
            overflowY: 'auto',
            overflowX: 'hidden',
            '&::-webkit-scrollbar': {
              width: '6px',
            },
            '&::-webkit-scrollbar-track': {
              background: 'rgba(0,0,0,0.05)',
              borderRadius: '3px',
            },
            '&::-webkit-scrollbar-thumb': {
              background: 'rgba(46, 125, 50, 0.3)',
              borderRadius: '3px',
              '&:hover': {
                background: 'rgba(46, 125, 50, 0.5)',
              }
            }
          }}>
            {cart.length > 0 && (
              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1.5 }}>
                {cart.map((item) => (
                  <Card key={item.product.documentId} sx={{
                    height: '35%',
                    minHeight: '7.5rem',
                    background: 'rgba(255, 255, 255, 0.95)',
                    backdropFilter: 'blur(0.625rem)',
                    borderRadius: '0.1875rem',
                    border: '0.0625rem solid rgba(46, 125, 50, 0.1)',
                    boxShadow: '0 0.125rem 0.75rem rgba(0, 0, 0, 0.08)',
                    transition: 'all 0.2s ease-in-out',
                    '&:hover': {
                      boxShadow: '0 0.25rem 1rem rgba(46, 125, 50, 0.12)',
                      transform: 'translateY(-0.0625rem)',
                    }
                  }}>
                    <CardContent sx={{ 
                      p: '1.5625rem', 
                      height: '100%',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'space-between',
                      '&:last-child': { pb: '1.5625rem' } 
                    }}>
                      {/* Product Image & Info */}
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, flex: 1 }}>
                        <Avatar
                          sx={{ 
                            width: '3.5rem', 
                            height: '3.5rem',
                            backgroundColor: 'rgba(46, 125, 50, 0.1)',
                            border: '0.0625rem solid rgba(46, 125, 50, 0.2)',
                            flexShrink: 0
                          }}
                          src={item.product.image?.[0]?.url ? `${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:1337'}${item.product.image[0].url}` : undefined}
                        >
                          üå∏
                        </Avatar>

                        <Box sx={{ flex: 1, minWidth: 0 }}>
                          <Typography 
                            variant="subtitle1" 
                            sx={{ 
                              fontWeight: 600,
                              color: '#2E7D32',
                              fontSize: '1rem',
                              mb: 0.5
                            }}
                          >
                            {item.product.name}
                          </Typography>
                          <Typography 
                            variant="body2" 
                            sx={{ 
                              fontSize: '0.85rem',
                              color: 'rgba(0, 0, 0, 0.6)'
                            }}
                          >
                            {item.product.price}‚Ç¥ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é
                          </Typography>
                        </Box>
                      </Box>

                      {/* Quantity Controls */}
                      <Box sx={{ 
                        display: 'flex', 
                        alignItems: 'center', 
                        gap: 1
                      }}>
                        <IconButton
                          size="small"
                          onClick={() => updateQuantity(item.product.documentId, item.quantity - 1)}
                          sx={{
                            width: '1.5rem',
                            height: '1.5rem',
                            color: '#2E7D32',
                            '&:hover': {
                              backgroundColor: 'rgba(46, 125, 50, 0.1)',
                            }
                          }}
                        >
                          <RemoveIcon sx={{ fontSize: '1.125rem' }} />
                        </IconButton>
                        <Typography 
                          variant="body1" 
                          sx={{ 
                            minWidth: '1.25rem', 
                            textAlign: 'center',
                            fontWeight: 600,
                            color: '#2E7D32',
                            fontSize: '1rem'
                          }}
                        >
                          {item.quantity}
                        </Typography>
                        <IconButton
                          size="small"
                          onClick={() => updateQuantity(item.product.documentId, item.quantity + 1)}
                          sx={{
                            width: '1.5rem',
                            height: '1.5rem',
                            color: '#2E7D32',
                            '&:hover': {
                              backgroundColor: 'rgba(46, 125, 50, 0.1)',
                            }
                          }}
                        >
                          <AddIcon sx={{ fontSize: '1.125rem' }} />
                        </IconButton>
                      </Box>

                      {/* Total Price */}
                      <Box sx={{ textAlign: 'right', minWidth: '5rem', mr: 2 }}>
                        <Typography 
                          variant="h6" 
                          sx={{ 
                            fontWeight: 700,
                            color: '#2E7D32',
                            fontSize: '1.1rem'
                          }}
                        >
                          {item.total}‚Ç¥
                        </Typography>
                      </Box>

                      {/* Remove Button */}
                      <IconButton
                        size="small"
                        onClick={() => removeFromCart(item.product.documentId)}
                        sx={{
                          color: 'error.main',
                          width: '1.5rem',
                          height: '1.5rem',
                          '&:hover': {
                            backgroundColor: 'rgba(244, 67, 54, 0.1)',
                          }
                        }}
                      >
                        <CloseIcon sx={{ fontSize: '1.125rem' }} />
                      </IconButton>
                    </CardContent>
                  </Card>
                ))}
              </Box>
            )}
          </Box>

          {/* Cart Footer */}
          <Box sx={{ 
            p: 3, 
            borderTop: '1px solid rgba(46, 125, 50, 0.1)',
            background: 'linear-gradient(135deg, rgba(46, 125, 50, 0.05) 0%, rgba(76, 175, 80, 0.03) 100%)',
            backdropFilter: 'blur(10px)',
            borderRadius: 0
          }}>
            {/* Total Section */}
            <Box sx={{ 
              display: 'flex', 
              justifyContent: 'space-between', 
              alignItems: 'center',
              mb: 3,
              p: 2,
              background: 'rgba(255, 255, 255, 0.7)',
              backdropFilter: 'blur(10px)',
              borderRadius: 2,
              border: '1px solid rgba(46, 125, 50, 0.1)',
              boxShadow: '0 2px 8px rgba(0,0,0,0.08)'
            }}>
              <Typography variant="h6" color="textPrimary" sx={{ fontWeight: 600 }}>
                –î–æ –æ–ø–ª–∞—Ç–∏:
              </Typography>
              <Typography variant="h4" sx={{ 
                fontWeight: 700, 
                color: '#2E7D32',
                textShadow: '0 1px 2px rgba(0,0,0,0.1)'
              }}>
                {total}‚Ç¥
              </Typography>
            </Box>
            
            {/* Payment Button */}
            <Button
              variant="contained"
              fullWidth
              startIcon={<PaymentIcon />}
              onClick={handlePayment}
              disabled={cart.length === 0}
              sx={{ 
                py: 2,
                px: 3,
                background: cart.length === 0 
                  ? 'rgba(0,0,0,0.12)' 
                  : 'linear-gradient(135deg, #2E7D32 0%, #4CAF50 100%)',
                boxShadow: cart.length === 0 
                  ? 'none' 
                  : '0 6px 20px rgba(46, 125, 50, 0.4), inset 0 1px 0 rgba(255, 255, 255, 0.2)',
                borderRadius: 3,
                fontWeight: 600,
                fontSize: '1.1rem',
                textTransform: 'none',
                border: cart.length === 0 
                  ? 'none' 
                  : '1px solid rgba(46, 125, 50, 0.3)',
                '&:hover': {
                  background: cart.length === 0 
                    ? 'rgba(0,0,0,0.12)' 
                    : 'linear-gradient(135deg, #1B5E20 0%, #2E7D32 100%)',
                  boxShadow: cart.length === 0 
                    ? 'none' 
                    : '0 8px 25px rgba(46, 125, 50, 0.5), inset 0 1px 0 rgba(255, 255, 255, 0.3)',
                  transform: cart.length === 0 ? 'none' : 'translateY(-2px)',
                },
                '&:active': {
                  transform: cart.length === 0 ? 'none' : 'translateY(-1px)',
                },
                '&:disabled': {
                  background: 'rgba(0,0,0,0.12)',
                  color: 'rgba(0,0,0,0.26)',
                  cursor: 'not-allowed'
                }
              }}
            >
              {cart.length === 0 ? '–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π' : '–°–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'}
            </Button>
          </Box>
        </Box>
        </Grid>

        {/* Right Panel - Products */}
        <Grid size={{ xs: 12, sm: 7.8, md: 7.8 }} sx={{ order: isMobile ? 2 : 1, height: '100%' }}>
          <Box sx={{ 
            height: '100%',
            background: 'linear-gradient(135deg, rgba(46, 125, 50, 0.1) 0%, rgba(76, 175, 80, 0.15) 50%, rgba(165, 214, 167, 0.1) 100%)',
            backdropFilter: 'blur(20px)',
            display: 'flex',
            flexDirection: 'column',
            borderRadius: 0,
            border: '1px solid rgba(46, 125, 50, 0.1)',
            position: 'relative',
            overflow: 'hidden'
          }}>
            {/* Products Header */}
            <Grid container spacing={1} sx={{ 
              p: isMobile ? 1.3 : 2.6, 
              borderBottom: '1px solid rgba(46, 125, 50, 0.2)',
              background: 'linear-gradient(135deg, rgba(46, 125, 50, 0.15) 0%, rgba(76, 175, 80, 0.1) 100%)',
              backdropFilter: 'blur(10px)',
              borderRadius: 0,
              alignItems: 'center',
              minHeight: isMobile ? '4.5rem' : '5.2rem'
            }}>
              {/* Category Filter */}
              <Grid size={{ xs: 12, md: 8 }}>
                <Box sx={{ 
                  display: 'flex',
                  gap: 0.5,
                  flexWrap: 'wrap',
                  justifyContent: isMobile ? 'center' : 'flex-start'
                }}>
                  <Box sx={{ display: 'flex', gap: 1 }}>
                    {categories.map((category) => (
                  <Chip
                    key={category.id}
                    label={isMobile ? category.icon : `${category.icon} ${category.name}`}
                    onClick={category.id === 'composition' || category.id === 'accessory' ? undefined : () => setSelectedCategory(category.id)}
                    variant={selectedCategory === category.id ? 'filled' : 'outlined'}
                    color={selectedCategory === category.id ? 'primary' : 'default'}
                    sx={{ 
                      opacity: category.id === 'composition' || category.id === 'accessory' ? 0.5 : 1,
                      cursor: category.id === 'composition' || category.id === 'accessory' ? 'not-allowed' : 'pointer',
                      backgroundColor: selectedCategory === category.id 
                        ? 'rgba(46, 125, 50, 0.8)' 
                        : 'rgba(255, 255, 255, 0.9)',
                      backdropFilter: 'blur(15px)',
                      border: selectedCategory === category.id 
                        ? '1px solid rgba(46, 125, 50, 0.6)' 
                        : '1px solid rgba(255, 255, 255, 0.5)',
                      boxShadow: selectedCategory === category.id 
                        ? '0 4px 16px rgba(46, 125, 50, 0.3), inset 0 1px 0 rgba(255, 255, 255, 0.2)' 
                        : '0 2px 8px rgba(0,0,0,0.15)',
                      color: selectedCategory === category.id ? 'white' : 'inherit',
                      fontSize: isMobile ? '0.9rem' : '1rem',
                      height: isMobile ? '1.95rem' : '2.6rem',
                      minWidth: isMobile ? '2rem' : 'auto',
                      '&:hover': {
                        backgroundColor: selectedCategory === category.id 
                          ? 'rgba(46, 125, 50, 0.9)' 
                          : 'rgba(255, 255, 255, 1)',
                        boxShadow: selectedCategory === category.id 
                          ? '0 6px 20px rgba(46, 125, 50, 0.4), inset 0 1px 0 rgba(255, 255, 255, 0.3)' 
                          : '0 4px 12px rgba(0,0,0,0.2)',
                        transform: 'translateY(-1px)',
                      }
                    }}
                  />
                ))}
                  </Box>
                </Box>
              </Grid>
              
              {/* Search Field */}
              <Grid size={{ xs: 12, md: 4 }}>
                <TextField
                  size="small"
                  placeholder="–ü–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <SearchIcon fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                  sx={{ 
                    width: '100%',
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 3,
                      backgroundColor: 'rgba(255, 255, 255, 0.95)',
                      backdropFilter: 'blur(20px)',
                      border: '1px solid rgba(255, 255, 255, 0.6)',
                      boxShadow: '0 3px 12px rgba(0,0,0,0.15)',
                      height: isMobile ? '1.95rem' : '2.6rem',
                      fontSize: isMobile ? '0.9rem' : '1rem',
                      '&:hover': {
                        backgroundColor: 'rgba(255, 255, 255, 0.98)',
                        border: '1px solid rgba(46, 125, 50, 0.4)',
                      },
                      '&.Mui-focused': {
                        backgroundColor: 'rgba(255, 255, 255, 1)',
                        border: '2px solid rgba(46, 125, 50, 0.6)',
                        boxShadow: '0 6px 16px rgba(46, 125, 50, 0.25)',
                      }
                    }
                  }}
                />
              </Grid>
            </Grid>

            {/* Products Grid */}
            <Box
              sx={{
                height: isMobile ? 'auto' : isTablet ? 'calc(100vh - 30vh)' : '95vh',
                overflowY: 'auto',
                display: 'flex',
                flexDirection: 'column',
                justifyContent: 'flex-start'
              }}
            >
              <Grid container spacing={1} sx={{ 
                p: isMobile ? 1 : 2, 
                overflowX: 'hidden',
                '&::-webkit-scrollbar': {
                  width: '6px',
                },
                '&::-webkit-scrollbar-track': {
                  background: 'rgba(0,0,0,0.05)',
                  borderRadius: '3px',
                },
                '&::-webkit-scrollbar-thumb': {
                  background: 'rgba(46, 125, 50, 0.3)',
                  borderRadius: '3px',
                  '&:hover': {
                    background: 'rgba(46, 125, 50, 0.5)',
                  },
                },
              }}>
              {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è */}
              {loading && (
                <Grid size={12}>
                  <Box sx={{ 
                    display: 'flex',
                    justifyContent: 'center',
                    alignItems: 'center',
                    p: 4,
                    backgroundColor: 'rgba(255, 255, 255, 0.9)',
                    borderRadius: 1,
                  }}>
                    <Box sx={{ textAlign: 'center' }}>
                      <Typography variant="h6" sx={{ mb: 2 }}>
                        –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤...
                      </Typography>
                      <Box sx={{ fontSize: '2rem' }}>üå∏</Box>
                    </Box>
                  </Box>
                </Grid>
              )}

              {/* –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ */}
              {!loading && filteredProducts.length === 0 && (
                <Grid size={12}>
                  <Box sx={{ 
                    display: 'flex',
                    justifyContent: 'center',
                    alignItems: 'center',
                    p: 4,
                    backgroundColor: 'rgba(255, 255, 255, 0.9)',
                    borderRadius: 1,
                  }}>
                    <Box sx={{ textAlign: 'center' }}>
                      <Typography variant="h6" sx={{ mb: 1 }}>
                        –¢–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ
                      </Typography>
                      <Typography variant="body2" color="textSecondary">
                        {searchTerm ? `–ó–∞ –ø–æ—à—É–∫–æ–º "${searchTerm}"` : '–°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏'}
                      </Typography>
                    </Box>
                  </Box>
                </Grid>
              )}

              {/* –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ */}
              {!loading && filteredProducts.slice(0, 12).map((product) => (
                <Grid size={{ xs: 6, sm: 4, md: 3 }} key={product.documentId}>
                  <Card 
                    sx={{ 
                      cursor: 'pointer',
                      transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                      height: isMobile ? 'auto' : isTablet ? 'calc(70vh / 4)' : 'calc(95vh / 5)',
                      display: 'flex',
                      flexDirection: 'column',
                      background: 'rgba(255, 255, 255, 0.98)',
                      backdropFilter: 'blur(20px)',
                      borderRadius: 0,
                      boxShadow: '0 3px 12px rgba(0,0,0,0.2), 0 1px 4px rgba(0,0,0,0.15)',
                      border: '1px solid rgba(255, 255, 255, 0.5)',
                      '&:hover': {
                        transform: 'translateY(-2px)',
                        boxShadow: '0 8px 25px rgba(0,0,0,0.25), 0 3px 8px rgba(0,0,0,0.2)',
                        background: 'rgba(255, 255, 255, 1)',
                        border: '1px solid rgba(46, 125, 50, 0.3)',
                      },
                      '&:active': {
                        transform: 'translateY(-1px)',
                      }
                    }}
                    onClick={() => addToCart(product)}
                  >
                  <CardContent sx={{ 
                    p: isMobile ? 1 : isTablet ? 1 : 1.5, 
                    textAlign: 'center', 
                    flex: 1,
                    display: 'flex',
                    flexDirection: 'column',
                    justifyContent: 'space-between'
                  }}>
                    <Avatar
                      sx={{ 
                        width: isMobile ? '3rem' : isTablet ? '2.5rem' : '4.5rem', 
                        height: isMobile ? '3rem' : isTablet ? '2.5rem' : '4.5rem', 
                        mx: 'auto', 
                        mb: isMobile ? 1 : isTablet ? 0.5 : 1,
                        backgroundColor: 'rgba(46, 125, 50, 0.1)',
                        fontSize: isMobile ? '1rem' : isTablet ? '0.9rem' : '1.4rem',
                        boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
                        border: '2px solid rgba(255, 255, 255, 0.8)'
                      }}
                      src={product.image?.[0]?.url ? `${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:1337'}${product.image[0].url}` : undefined}
                    >
                      üå∏
                    </Avatar>
                    <Typography 
                      variant="body2" 
                      sx={{ 
                        fontWeight: 600,
                        mb: 0.5,
                        fontSize: isMobile ? '0.8rem' : isTablet ? '0.9rem' : '1rem',
                        display: '-webkit-box',
                        WebkitLineClamp: 2,
                        WebkitBoxOrient: 'vertical',
                        overflow: 'hidden',
                        textOverflow: 'ellipsis',
                        minHeight: '2.2em',
                        lineHeight: 1.1
                      }}
                    >
                      {product.name}
                    </Typography>
                    <Typography 
                      variant="h6" 
                      sx={{ 
                        fontWeight: 700,
                        fontSize: isMobile ? '0.9rem' : isTablet ? '1rem' : '1.1rem',
                        color: 'primary.main' 
                      }}
                    >
                      {product.price}‚Ç¥
                    </Typography>
                    {product.availableQuantity !== undefined && (
                      <Typography 
                        variant="caption" 
                        color={product.availableQuantity === 0 ? 'error' : 'textSecondary'}
                        sx={{ display: 'block', mt: 0.5 }}
                      >
                        {product.availableQuantity} —à—Ç
                      </Typography>
                    )}
                  </CardContent>
                </Card>
                </Grid>
              ))}
              
              {/* –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä —è–∫—â–æ —Ç–æ–≤–∞—Ä—ñ–≤ –±—ñ–ª—å—à–µ 12 */}
              {filteredProducts.length > 12 && (
                <Grid size={12}>
                  <Box sx={{ 
                    display: 'flex',
                    justifyContent: 'center',
                    alignItems: 'center',
                    p: 2,
                    backgroundColor: '#f5f5f5',
                    borderRadius: 1,
                    border: '0.1% dashed #ccc'
                  }}>
                    <Typography variant="body2" color="textSecondary">
                      –ü–æ–∫–∞–∑–∞–Ω–æ 12 –∑ {filteredProducts.length} —Ç–æ–≤–∞—Ä—ñ–≤
                    </Typography>
                  </Box>
                </Grid>
              )}
            </Grid>
          </Box>
        </Grid>
          </Box>
        </Grid>

        {/* Payment Modal */}
        <Dialog
        open={paymentModalOpen}
        onClose={handlePaymentCancel}
        maxWidth={false}
        fullWidth
        sx={{
          '& .MuiDialog-paper': {
            width: isMobile ? '95%' : isTablet ? '70%' : '50%',
            maxWidth: 'none',
            minHeight: isMobile ? '90%' : '80%',
            maxHeight: isMobile ? '95%' : '90%',
          }
        }}
        BackdropProps={{
          sx: {
            background: 'rgba(0, 0, 0, 0.4)',
            backdropFilter: 'blur(20px)',
            WebkitBackdropFilter: 'blur(20px)',
          }
        }}
        PaperProps={{
          sx: {
            background: 'rgba(255, 255, 255, 0.85)',
            backdropFilter: 'blur(40px)',
            borderRadius: '1.5rem',
            border: '1px solid rgba(255, 255, 255, 0.3)',
            boxShadow: '0 20px 60px rgba(0, 0, 0, 0.1), inset 0 1px 0 rgba(255, 255, 255, 0.6)',
            overflow: 'hidden',
            position: 'relative',
            '&::before': {
              content: '""',
              position: 'absolute',
              top: 0,
              left: 0,
              right: 0,
              height: '1px',
              background: 'linear-gradient(90deg, transparent, rgba(46, 125, 50, 0.2), transparent)',
            }
          }
        }}
      >
        {/* Header */}
        <Box sx={{
          p: '1.5rem',
          pb: '1rem',
          background: 'linear-gradient(135deg, rgba(46, 125, 50, 0.03) 0%, rgba(76, 175, 80, 0.02) 100%)',
          borderBottom: '1px solid rgba(46, 125, 50, 0.08)',
          position: 'relative'
        }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="h4" sx={{ 
              fontWeight: 700, 
              color: '#1A1A1A',
              fontSize: '1.25rem',
              letterSpacing: '-0.02em'
            }}>
              –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            </Typography>
            <IconButton 
              onClick={handlePaymentCancel} 
              sx={{
                width: '2rem',
                height: '2rem',
                borderRadius: '50%',
                background: 'rgba(0, 0, 0, 0.05)',
                backdropFilter: 'blur(10px)',
                border: '1px solid rgba(0, 0, 0, 0.1)',
                '&:hover': {
                  background: 'rgba(0, 0, 0, 0.1)',
                  transform: 'scale(1.05)'
                }
              }}
            >
              <CloseIcon sx={{ fontSize: '1rem', color: '#666' }} />
            </IconButton>
          </Box>
        </Box>

        <Box sx={{ p: '1.5rem', pt: 0 }}>
          {/* Order Summary */}
          <Box sx={{ 
            mb: '1.5rem',
            background: 'rgba(46, 125, 50, 0.02)',
            borderRadius: '0.75rem',
            border: '1px solid rgba(46, 125, 50, 0.08)',
            overflow: 'hidden',
            position: 'relative'
          }}>
            <Box sx={{
              p: '1rem',
              background: 'linear-gradient(135deg, rgba(46, 125, 50, 0.05) 0%, rgba(76, 175, 80, 0.03) 100%)',
              borderBottom: '1px solid rgba(46, 125, 50, 0.08)'
            }}>
              <Typography variant="h6" sx={{ 
                fontWeight: 600, 
                color: '#2E7D32',
                fontSize: '1rem',
                mb: 0
              }}>
                –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ({cart.length} —Ç–æ–≤–∞—Ä—ñ–≤)
              </Typography>
            </Box>
            
            <Box sx={{ p: '1rem' }}>
              {cart.map((item, index) => (
                <Box key={item.product.documentId} sx={{ 
                  display: 'flex', 
                  justifyContent: 'space-between', 
                  alignItems: 'center',
                  py: '0.5rem',
                  borderBottom: index < cart.length - 1 ? '1px solid rgba(0, 0, 0, 0.05)' : 'none'
                }}>
                  <Typography variant="body1" sx={{ 
                    fontWeight: 500,
                    color: '#1A1A1A',
                    fontSize: '0.9rem'
                  }}>
                    {item.product.name} √ó {item.quantity}
                  </Typography>
                  <Typography variant="body1" sx={{ 
                    fontWeight: 600,
                    color: '#2E7D32',
                    fontSize: '0.9rem'
                  }}>
                    {item.total}‚Ç¥
                  </Typography>
                </Box>
              ))}
              
              <Box sx={{ 
                mt: '0.75rem',
                pt: '0.75rem',
                borderTop: '2px solid rgba(46, 125, 50, 0.1)',
                display: 'flex', 
                justifyContent: 'space-between',
                alignItems: 'center'
              }}>
                <Typography variant="h6" sx={{ 
                  fontWeight: 700,
                  color: '#1A1A1A',
                  fontSize: '1rem'
                }}>
                  –°—É–º–∞ —Ç–æ–≤–∞—Ä—ñ–≤:
                </Typography>
                <Typography variant="h6" sx={{ 
                  fontWeight: 700,
                  color: '#2E7D32',
                  fontSize: '1rem'
                }}>
                  {subtotal}‚Ç¥
                </Typography>
              </Box>
            </Box>
          </Box>

          {/* Payment Method */}
          <Box sx={{ mb: '1.5rem' }}>
            <Typography variant="h6" sx={{ 
              mb: '1rem', 
              fontWeight: 600,
              color: '#1A1A1A',
              fontSize: '1rem'
            }}>
              –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏
            </Typography>
            <Box sx={{ 
              display: 'flex', 
              gap: '0.75rem',
              flexDirection: isMobile ? 'column' : 'row'
            }}>
              {[
                { 
                  value: 'cash', 
                  label: '–ì–æ—Ç—ñ–≤–∫–∞', 
                  icon: (
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M2 17H22V19H2V17ZM2 10H22V12H2V10ZM2 3H22V5H2V3ZM4 6H20V8H4V6ZM4 13H20V15H4V13Z" fill="currentColor"/>
                      <circle cx="6" cy="7" r="1" fill="#2E7D32"/>
                      <circle cx="6" cy="14" r="1" fill="#2E7D32"/>
                    </svg>
                  )
                },
                { 
                  value: 'card', 
                  label: '–ö–∞—Ä—Ç–∫–∞', 
                  icon: (
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <rect x="2" y="6" width="20" height="12" rx="2" fill="#1976D2" stroke="#1976D2" strokeWidth="1"/>
                      <rect x="2" y="10" width="20" height="2" fill="#fff"/>
                      <circle cx="18" cy="8" r="1.5" fill="#FFD700"/>
                      <text x="4" y="16" fontSize="8" fill="#fff" fontFamily="Arial">**** **** **** 1234</text>
                    </svg>
                  )
                }
              ].map((method) => (
                <Box
                  key={method.value}
                  onClick={() => setPaymentMethod(method.value)}
                  sx={{
                    flex: 1,
                    height: isMobile ? '3rem' : '4rem',
                    borderRadius: '0.5rem',
                    border: paymentMethod === method.value 
                      ? '2px solid rgba(46, 125, 50, 0.3)' 
                      : '1px solid rgba(0, 0, 0, 0.1)',
                    background: paymentMethod === method.value 
                      ? 'linear-gradient(135deg, rgba(46, 125, 50, 0.08) 0%, rgba(76, 175, 80, 0.05) 100%)'
                      : 'rgba(255, 255, 255, 0.5)',
                    backdropFilter: 'blur(10px)',
                    cursor: 'pointer',
                    transition: 'all 0.2s ease',
                    display: 'flex',
                    flexDirection: 'column',
                    alignItems: 'center',
                    justifyContent: 'center',
                    gap: '0.5rem',
                    '&:hover': {
                      border: '2px solid rgba(46, 125, 50, 0.2)',
                      background: 'rgba(46, 125, 50, 0.05)',
                      transform: 'translateY(-1px)'
                    }
                  }}
                >
                  <Box sx={{ 
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    '& svg': {
                      width: '1.5rem',
                      height: '1.5rem'
                    }
                  }}>
                    {method.icon}
                  </Box>
                  <Typography sx={{ 
                    fontWeight: paymentMethod === method.value ? 600 : 500,
                    color: paymentMethod === method.value ? '#2E7D32' : '#1A1A1A',
                    fontSize: '0.9rem',
                    textAlign: 'center'
                  }}>
                    {method.label}
                  </Typography>
                </Box>
              ))}
            </Box>
          </Box>

          {/* Delivery */}
          <Box sx={{ mb: '1.5rem' }}>
            <Box
              onClick={() => setIncludeDelivery(!includeDelivery)}
              sx={{
                p: '0.75rem',
                borderRadius: '0.5rem',
                border: includeDelivery 
                  ? '2px solid rgba(46, 125, 50, 0.3)' 
                  : '1px solid rgba(0, 0, 0, 0.1)',
                background: includeDelivery 
                  ? 'linear-gradient(135deg, rgba(46, 125, 50, 0.08) 0%, rgba(76, 175, 80, 0.05) 100%)'
                  : 'rgba(255, 255, 255, 0.5)',
                backdropFilter: 'blur(10px)',
                cursor: 'pointer',
                transition: 'all 0.2s ease',
                display: 'flex',
                alignItems: 'center',
                gap: '0.75rem',
                '&:hover': {
                  border: '2px solid rgba(46, 125, 50, 0.2)',
                  background: 'rgba(46, 125, 50, 0.05)',
                  transform: 'translateY(-1px)'
                }
              }}
            >
              <Box sx={{ 
                width: '1rem',
                height: '1rem',
                borderRadius: '0.25rem',
                border: '2px solid',
                borderColor: includeDelivery ? '#2E7D32' : '#ccc',
                background: includeDelivery ? '#2E7D32' : 'transparent',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                transition: 'all 0.2s ease'
              }}>
                {includeDelivery && (
                  <Typography sx={{ color: 'white', fontSize: '0.6rem', fontWeight: 600 }}>
                    ‚úì
                  </Typography>
                )}
              </Box>
              <Typography sx={{ 
                fontWeight: includeDelivery ? 600 : 500,
                color: includeDelivery ? '#2E7D32' : '#1A1A1A',
                fontSize: '0.9rem'
              }}>
                –î–æ—Å—Ç–∞–≤–∫–∞
              </Typography>
            </Box>
            
            {includeDelivery && (
              <Box sx={{ mt: '0.75rem', ml: '1.75rem' }}>
                <TextField
                  size="small"
                  label="–¶—ñ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"
                  type="number"
                  value={deliveryPrice}
                  onChange={(e) => setDeliveryPrice(Number(e.target.value))}
                  sx={{ 
                    width: '10rem',
                    '& .MuiOutlinedInput-root': {
                      borderRadius: '0.5rem',
                      background: 'rgba(255, 255, 255, 0.7)',
                      backdropFilter: 'blur(10px)',
                      border: '1px solid rgba(0, 0, 0, 0.1)',
                      '&:hover': {
                        border: '1px solid rgba(46, 125, 50, 0.3)',
                      },
                      '&.Mui-focused': {
                        border: '2px solid #2E7D32',
                      }
                    }
                  }}
                  InputProps={{
                    endAdornment: <Typography variant="body2" sx={{ color: '#666' }}>‚Ç¥</Typography>
                  }}
                />
              </Box>
            )}
          </Box>

          {/* Order Comment */}
          <Box sx={{ mb: '1.5rem' }}>
            <Typography variant="h6" sx={{ 
              mb: '0.75rem', 
              fontWeight: 600,
              color: '#1A1A1A',
              fontSize: '1rem'
            }}>
              –ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            </Typography>
            <TextField
              fullWidth
              multiline
              rows={2}
              placeholder="–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–±–∞–∂–∞–Ω–Ω—è, –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏, —Ç–æ—â–æ..."
              value={orderComment}
              onChange={(e) => setOrderComment(e.target.value)}
              sx={{
                '& .MuiOutlinedInput-root': {
                  borderRadius: '0.5rem',
                  background: 'rgba(255, 255, 255, 0.7)',
                  backdropFilter: 'blur(10px)',
                  border: '1px solid rgba(0, 0, 0, 0.1)',
                  '&:hover': {
                    border: '1px solid rgba(46, 125, 50, 0.3)',
                  },
                  '&.Mui-focused': {
                    border: '2px solid #2E7D32',
                  }
                }
              }}
            />
          </Box>

          {/* Total */}
          <Box sx={{ 
            mb: '1.5rem',
            p: '1rem',
            background: 'linear-gradient(135deg, rgba(46, 125, 50, 0.08) 0%, rgba(76, 175, 80, 0.05) 100%)',
            borderRadius: '0.75rem',
            border: '1px solid rgba(46, 125, 50, 0.15)',
            backdropFilter: 'blur(10px)'
          }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <Typography variant="h6" sx={{ 
                fontWeight: 700,
                color: '#1A1A1A',
                fontSize: '1.1rem'
              }}>
                –î–æ —Å–ø–ª–∞—Ç–∏:
              </Typography>
              <Typography variant="h5" sx={{ 
                fontWeight: 800, 
                color: '#2E7D32',
                fontSize: '1.5rem',
                textShadow: '0 1px 2px rgba(0,0,0,0.1)'
              }}>
                {total}‚Ç¥
              </Typography>
            </Box>
            {includeDelivery && (
              <Typography variant="body2" sx={{ 
                mt: '0.5rem',
                color: '#666',
                fontSize: '0.8rem'
              }}>
                –í–∫–ª—é—á–∞—î –¥–æ—Å—Ç–∞–≤–∫—É: {deliveryPrice}‚Ç¥
              </Typography>
            )}
          </Box>
        </Box>

        {/* Actions */}
        <Box sx={{ 
          p: '1.5rem',
          pt: '1rem',
          borderTop: '1px solid rgba(46, 125, 50, 0.08)',
          background: 'rgba(46, 125, 50, 0.01)',
          display: 'flex',
          gap: '0.75rem',
          justifyContent: 'flex-end'
        }}>
          <Button
            onClick={handlePaymentCancel}
            variant="outlined"
            sx={{
              px: '1.5rem',
              py: '0.5rem',
              borderRadius: '0.5rem',
              border: '1px solid rgba(0, 0, 0, 0.2)',
              background: 'rgba(255, 255, 255, 0.7)',
              backdropFilter: 'blur(10px)',
              color: '#666',
              fontWeight: 600,
              fontSize: '0.9rem',
              textTransform: 'none',
              boxShadow: '0 2px 8px rgba(0, 0, 0, 0.1)',
              '&:hover': {
                background: 'rgba(0, 0, 0, 0.05)',
                border: '1px solid rgba(0, 0, 0, 0.3)',
                transform: 'translateY(-1px)',
                boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)'
              }
            }}
          >
            –°–∫–∞—Å—É–≤–∞—Ç–∏
          </Button>
          <Button
            onClick={handlePaymentComplete}
            variant="contained"
            sx={{
              px: '1.5rem',
              py: '0.5rem',
              borderRadius: '0.5rem',
              background: 'linear-gradient(135deg, #2E7D32 0%, #4CAF50 100%)',
              color: 'white',
              fontWeight: 700,
              fontSize: '0.9rem',
              textTransform: 'none',
              boxShadow: '0 4px 16px rgba(46, 125, 50, 0.3)',
              border: 'none',
              '&:hover': {
                background: 'linear-gradient(135deg, #1B5E20 0%, #388E3C 100%)',
                transform: 'translateY(-2px)',
                boxShadow: '0 6px 20px rgba(46, 125, 50, 0.4)'
              }
            }}
          >
            –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É
          </Button>
        </Box>
      </Dialog>
      </Grid>
    </Box>
  );
}
